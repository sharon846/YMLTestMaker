FILE_CHECK_PATTERN = """    - name: Check Existence for Q5      id: check_q5      uses: andstor/file-existence-action@v3      with:        files: task5.py"""def generate_bonus_data():    st = ""    for task in BONUS:        temp = FILE_CHECK_PATTERN        temp = temp.replace("Q5", f"Q{task}")        temp = temp.replace("q5", f"q{task}")        st += temp.replace("task5", f"task{task}")    return stdef generate_tests_data(lines):    st = ""    task_num = None    test_num = None    in_input = False    inputs = []    output = None    setup_command = "''"    run_command = '""'    score = 0        test_names = []    test_names_bonus = []    for line in lines:        if "# Task" in line:            task_num = line[7]            continue                    if "## Test" in line:            test_num = line[8]            continue                    if "Setup-command" in line:            setup_command = line[17:-1]                if "Run-command" in line:            run_command = line[15:-1]                    if "Score" in line:            score = line[9:-1]                    if "- Input" in line:            inputs = []            inputs.append(line[9:])            in_input = True            continue                    elif in_input and "Expected Output:" not in line:            inputs.append(line)                if "Expected Output:" in line:                        in_input = False            output = line[19:]                        temp = TEST                        if setup_command != "''":                temp = temp.replace(default_setup_command, setup_command)             if run_command != '""':                temp = temp.replace(default_run_command, run_command)                         temp = temp.replace("TASKNUM", task_num)            temp = temp.replace("TESTNUM", test_num)            #print(inputs)            temp = temp.replace("INPUTDATA", "          ".join(inputs))                        if task_num in BONUS:                temp = temp.replace("BONUSCOND", f"\n      if: steps.check_q{task_num}.outputs.files_exists == 'true'")                         temp = temp.replace("BONUSCOND", "")             temp = temp.replace("SCORE", str(score))                        st += temp.replace("OUTPUTDATA", output)            test_names.append(f"q{task_num}-test{test_num}")                        setup_command = "''"            run_command = '""'            score = 0    return st, test_namesdef generate_summary(test_names, reporter_name, bonus):    detailing = []    for test_name in test_names:        detailing.append(f"{test_name.upper()}" + '_RESULTS: "${{steps.' + test_name + '.outputs.result}}"')        temp = REPORTER.replace("TEST-DETAILING", "\n        ".join(detailing))    temp = temp.replace("REPORTER_NAME", reporter_name)    temp = temp.replace("TEST-NAMES", ",".join(test_names))        if bonus:        temp = temp.replace("BONUSCOND", f"\n      if: steps.check_q{reporter_name[1:]}.outputs.files_exists == 'true'")                 temp = temp.replace("BONUSCOND", "")     return tempREPORTER = """    - name: Autograding Reporter for REPORTER_NAME      uses: classroom-resources/autograding-grading-reporter@v1BONUSCOND      env:        TEST-DETAILING      with:        runners: TEST-NAMES"""TEST = """    - name: Run QTASKNUM Test TESTNUM       id: qTASKNUM-testTESTNUMBONUSCOND      uses: classroom-resources/autograding-io-grader@v1      with:        test-name: QTASKNUM-testTESTNUM        setup-command: Default-setup-command        command: Default-command        input: |-           INPUTDATA        expected-output: |-          OUTPUTDATA        comparison-method: exact        timeout: 10        max-score: SCORE"""TEMPLATE_START = """name: Autograding Tests'on':- push- repository_dispatchpermissions:  checks: write  actions: read  contents: readjobs:  run-autograding-tests:    runs-on: ubuntu-latest    if: github.actor != 'github-classroom[bot]'    steps:    - name: Checkout code      uses: actions/checkout@v4"""BONUS = ['5','6']path = "tests.txt"with open(path, "r") as f:	lines = f.readlines()default_setup_command = "''"default_run_command = '""'if "Default-setup-command:" in lines[0]:    default_setup_command = lines[0][23:-1]if "Default-command:" in lines[1]:    default_run_command = lines[1][17:-1]TEST = TEST.replace('Default-setup-command', default_setup_command)TEST = TEST.replace('Default-command', default_run_command)yml = TEMPLATE_STARTyml += generate_bonus_data()temp, test_names = generate_tests_data(lines)yml += temptest_names_mandatory = [test for test in test_names if test[1] not in BONUS]yml += generate_summary(test_names_mandatory, "Mandatory", bonus=False)test_names_bonus = [[test_name for test_name in test_names if test_name.startswith(f"q{task_num}")] for task_num in BONUS]for idx, tests in enumerate(test_names_bonus):    yml += generate_summary(tests, f"Q{BONUS[idx]}", bonus=True)print(yml)